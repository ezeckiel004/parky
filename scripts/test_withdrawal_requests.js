// Test script pour les demandes de retrait
// Ce script peut √™tre ex√©cut√© avec Node.js pour tester les endpoints

const axios = require('axios');

const API_BASE_URL = 'http://localhost:3000/api';
let authToken = '';

// Fonction d'authentification
async function login(email, password) {
  try {
    const response = await axios.post(`${API_BASE_URL}/auth/login`, {
      email,
      password
    });
    
    authToken = response.data.token;
    console.log('‚úÖ Connexion r√©ussie');
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur de connexion:', error.response?.data || error.message);
    throw error;
  }
}

// Fonction pour cr√©er une demande de retrait
async function createWithdrawalRequest(amount, paymentMethod, bankDetails) {
  try {
    const response = await axios.post(`${API_BASE_URL}/balance/withdrawal-request`, {
      amount,
      paymentMethod,
      bankDetails
    }, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ Demande de retrait cr√©√©e:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur cr√©ation demande:', error.response?.data || error.message);
    throw error;
  }
}

// Fonction pour r√©cup√©rer les demandes de retrait (propri√©taire)
async function getMyWithdrawalRequests() {
  try {
    const response = await axios.get(`${API_BASE_URL}/balance/my-withdrawal-requests`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log('‚úÖ Mes demandes de retrait:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration demandes:', error.response?.data || error.message);
    throw error;
  }
}

// Fonction pour r√©cup√©rer toutes les demandes (admin)
async function getAllWithdrawalRequests() {
  try {
    const response = await axios.get(`${API_BASE_URL}/balance/withdrawal-requests`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log('‚úÖ Toutes les demandes de retrait:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration toutes demandes:', error.response?.data || error.message);
    throw error;
  }
}

// Fonction pour approuver/rejeter une demande (admin)
async function updateWithdrawalRequest(requestId, status, adminNotes = null, rejectionReason = null) {
  try {
    const response = await axios.patch(`${API_BASE_URL}/balance/withdrawal-requests/${requestId}`, {
      status,
      adminNotes,
      rejectionReason
    }, {
      headers: {
        'Authorization': `Bearer ${authToken}`,
        'Content-Type': 'application/json'
      }
    });
    
    console.log('‚úÖ Demande mise √† jour:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur mise √† jour demande:', error.response?.data || error.message);
    throw error;
  }
}

// Fonction pour r√©cup√©rer la balance
async function getBalance() {
  try {
    const response = await axios.get(`${API_BASE_URL}/balance/my-balance`, {
      headers: {
        'Authorization': `Bearer ${authToken}`
      }
    });
    
    console.log('‚úÖ Balance actuelle:', response.data);
    return response.data;
  } catch (error) {
    console.error('‚ùå Erreur r√©cup√©ration balance:', error.response?.data || error.message);
    throw error;
  }
}

// Script de test principal
async function runTests() {
  try {
    console.log('üöÄ D√©but des tests des demandes de retrait\n');
    
    // 1. Connexion en tant que propri√©taire
    console.log('1. Connexion en tant que propri√©taire...');
    await login('proprietaire@test.com', 'password123');
    
    // 2. V√©rification de la balance
    console.log('\n2. V√©rification de la balance...');
    const balanceBefore = await getBalance();
    
    // 3. Cr√©ation d'une demande de retrait
    console.log('\n3. Cr√©ation d\'une demande de retrait...');
    const withdrawalRequest = await createWithdrawalRequest(50.00, 'bank_transfer', {
      accountHolder: 'John Doe',
      iban: 'FR1420041010050500013M02606',
      bic: 'PSSTFRPPXXX',
      bankName: 'Banque Populaire'
    });
    
    // 4. R√©cup√©ration des demandes du propri√©taire
    console.log('\n4. R√©cup√©ration des demandes du propri√©taire...');
    await getMyWithdrawalRequests();
    
    // 5. Connexion en tant qu'admin pour traiter la demande
    console.log('\n5. Connexion en tant qu\'admin...');
    await login('admin@test.com', 'admin123');
    
    // 6. R√©cup√©ration de toutes les demandes (admin)
    console.log('\n6. R√©cup√©ration de toutes les demandes (admin)...');
    const allRequests = await getAllWithdrawalRequests();
    
    // 7. Approbation de la demande
    if (allRequests.withdrawalRequests && allRequests.withdrawalRequests.length > 0) {
      const requestId = allRequests.withdrawalRequests[0].id;
      console.log(`\n7. Approbation de la demande ${requestId}...`);
      await updateWithdrawalRequest(requestId, 'approved', 'Demande approuv√©e automatiquement par le test');
    }
    
    // 8. Reconnexion en tant que propri√©taire pour v√©rifier la balance
    console.log('\n8. V√©rification de la balance apr√®s approbation...');
    await login('proprietaire@test.com', 'password123');
    const balanceAfter = await getBalance();
    
    console.log('\n‚úÖ Tests termin√©s avec succ√®s!');
    console.log(`Balance avant: ${balanceBefore.balance?.current_balance || 0}‚Ç¨`);
    console.log(`Balance apr√®s: ${balanceAfter.balance?.current_balance || 0}‚Ç¨`);
    
  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error.message);
  }
}

// Ex√©cuter les tests si ce fichier est lanc√© directement
if (require.main === module) {
  runTests();
}

module.exports = {
  login,
  createWithdrawalRequest,
  getMyWithdrawalRequests,
  getAllWithdrawalRequests,
  updateWithdrawalRequest,
  getBalance
};